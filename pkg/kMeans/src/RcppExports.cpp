// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "kmBlock_types.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// kmBlock
Rcpp::List kmBlock(const Array& M, const IVector& clu, Array& weights, const IVector& n, const IVector& nClu);
RcppExport SEXP _kmBlock_kmBlock(SEXP MSEXP, SEXP cluSEXP, SEXP weightsSEXP, SEXP nSEXP, SEXP nCluSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Array& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const IVector& >::type clu(cluSEXP);
    Rcpp::traits::input_parameter< Array& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const IVector& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const IVector& >::type nClu(nCluSEXP);
    rcpp_result_gen = Rcpp::wrap(kmBlock(M, clu, weights, n, nClu));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_kmBlock_kmBlock", (DL_FUNC) &_kmBlock_kmBlock, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_kmBlock(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
